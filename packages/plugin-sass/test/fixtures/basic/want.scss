////
/// Autogenerated by â›‹ Terrazzo. DO NOT EDIT!
////

@use "sass:list";
@use "sass:map";
@use "sass:meta";

$__token-values: (
  "border.std": (var(--ds-border-std)),
  "color.red": (var(--ds-color-red)),
  "color.green": (var(--ds-color-green)),
  "color.blue": (var(--ds-color-blue)),
  "color.redgreenblue": (var(--ds-color-redgreenblue)),
  "gradient.g-b": (var(--ds-gradient-g-b)),
  "typography.family.body": (var(--ds-typography-family-body)),
  "typography.family.heading": (var(--ds-typography-family-heading)),
  "typography.page-title": (
    "__tz-error": 'This is a typography mixin. Use `@include typography("typography.page-title")` instead.',
  ),
  "typography.subheading": (
    "__tz-error": 'This is a typography mixin. Use `@include typography("typography.subheading")` instead.',
  ),
  "typography.callout": (
    "__tz-error": 'This is a typography mixin. Use `@include typography("typography.callout")` instead.',
  ),
  "typography.body": (
    "__tz-error": 'This is a typography mixin. Use `@include typography("typography.body")` instead.',
  ),
  "shadow": (var(--ds-shadow)),
  "transition": (var(--ds-transition)),
);

$__token-typography-mixins: (
  "typography.page-title": (
    "font-family": (var(--ds-typography-page-title-font-family)),
    "font-size": (var(--ds-typography-page-title-font-size)),
    "font-weight": (var(--ds-typography-page-title-font-weight)),
    "line-height": (var(--ds-typography-page-title-line-height)),
    "letter-spacing": (var(--ds-typography-page-title-letter-spacing)),
  ),
  "typography.subheading": (
    "font-family": (var(--ds-typography-subheading-font-family)),
    "font-size": (var(--ds-typography-subheading-font-size)),
    "font-weight": (var(--ds-typography-subheading-font-weight)),
    "line-height": (var(--ds-typography-subheading-line-height)),
    "letter-spacing": (var(--ds-typography-subheading-letter-spacing)),
    "text-transform": (var(--ds-typography-subheading-text-transform)),
  ),
  "typography.callout": (
    "font-family": (var(--ds-typography-callout-font-family)),
    "font-size": (var(--ds-typography-callout-font-size)),
    "font-weight": (var(--ds-typography-callout-font-weight)),
    "font-style": (var(--ds-typography-callout-font-style)),
    "line-height": (var(--ds-typography-callout-line-height)),
  ),
  "typography.body": (
    "font-family": (var(--ds-typography-body-font-family)),
    "font-size": (var(--ds-typography-body-font-size)),
    "font-weight": (var(--ds-typography-body-font-weight)),
    "line-height": (var(--ds-typography-body-line-height)),
  ),
);

@function token($tokenName) {
  @if map.has-key($__token-values, $tokenName) == false {
    @error 'No token named "#{$tokenName}"';
  }
  $_token: map.get($__token-values, $tokenName);
  @if meta.type-of($_token) == map and map.has-key($_token, "__tz-error") {
    @error map.get($_token, "__tz-error");
  }

  @return $_token;
}

@mixin typography($tokenName, $modeName: ".") {
  @if map.has-key($__token-typography-mixins, $tokenName) == false {
    @error 'No typography mixin named "#{$tokenName}"';
  }
  $_mixin: map.get($__token-typography-mixins, $tokenName);
  $_properties: map.get($_mixin, ".");
  @if map.has-key($_mixin) {
    $_properties: map.get($_mixin);
  }
  @each $_property, $_value in $_properties {
    #{$_property}: #{$_value};
  }
}
